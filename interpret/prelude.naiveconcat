-- FLOW CONTROL


-- if
-- `{"consequent" say} {"alternative" say} false if apply`
-- => "alternative"
{
    "predicate" let 
    "alternative" let
    "consequent" let
    consequent predicate then
    alternative predicate not then
    apply
} "if" define


-- each
-- Not tail recursive, could have bad performance
{
    "f" let
    dup length "l" let
    {
        lop 
        f apply
        {f each}  dup length 0 = not  then apply
    } l 0 = not   then apply
} "each" define


-- reduce
-- `{1 2 3} {+} 1 reduce`
-- => 7
{
  "f" let
  "accumulator" let
  dup length "l" let
  {
    lop "x" let
    dup length "next_l" let
    accumulator x f apply
    {f reduce} {swap drop} next_l 0 = not if  
  } l 0 = not then apply
} "reduce" define


-- STACK MANIPULATION


-- swap
{
    "a" let
    "b" let
    a b
} "swap" define



-- STRINGS


{ split swap drop } "trim_front" define
-- > "Foobar" 2 trim_front
-- ["obar"]

{ find 0 >= } "has_substring?" define
-- > "Brendan" "end" has_substring?
-- [ TRUE ]

{
  "delimiter" let
  "original" let
  delimiter length "delimiter_length" let

  { 
    original delimiter find "index" let
    original index split  -- split before the delimiter
    delimiter_length trim_front  -- drop the delimiter
    "second part" let
    "first part" let
    {} first_part append second_part append
  } 
  { {} original append } 
  original delimiter has_substring? if
 
} "split_on" define


{
  "delimiter" let
  "original" let
  delimiter length "delimiter_length" let

  { 
    original delimiter find "index" let
    original index split  -- split before the delimiter
    delimiter_length trim_front -- drop the delimiter
    "second part" let
    "first part" let
    {} first_part append 
    second_part
    { -- split_each the second part and concat the result
      delimiter split_each concat
    }
    { -- or just append the second part if no more splits necessary
      append
    }
    second_part delimiter has_substring? if
  } 
  { {} original append } 
  original delimiter has_substring? if
} "split_each" define


-- CONCAT


{ swap { append } reduce } "concat" define
