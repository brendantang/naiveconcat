-- FLOW CONTROL


-- if
-- `{"consequent" say} {"alternative" say} false if apply`
-- => "alternative"
{
    "predicate" let 
    "alternative" let
    "consequent" let
    consequent predicate then
    alternative predicate not then
    apply
} "if" define


-- each
-- Not tail recursive, could have bad performance
{
    "f" let
    length "l" let
    {
        lop 
        f apply
        {f each}  length 0 = not  then apply
    } l 0 = not   then apply
} "each" define



-- STACK MANIPULATION


-- swap
{
    "a" let
    "b" let
    a b
} "swap" define



-- STRINGS


{
  find "index" let
  "delimiter" let
  "original" let

  { 
    original index split 
    delimiter length swap drop
    split swap drop
    swap {} append append
  } index 0 >= then -- apply
  --{{} append} index 0 < then apply
} "split_on" define


{
  "delimiter" let
  delimiter find
} "split_each" define


